#version 330



in vec3 normal;
in vec3 fragPos;

vec3 lightPos = vec3(-4.5f, 1.0f, 3.0f);
vec3 viewPos = vec3(0.0, 0.0, -10f);
vec3 lightColor = vec3(0.0f, 1.0f, 0.0f);
vec3 objectColor = vec3(0.0f, 1.0f, 0.0f);
float specStrength = 0.2;

in vec3 LightIntensity;
void main(){

	float ambientStr = 0.1;
	vec3 ambient = ambientStr * lightColor;

	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specStrength * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;


	gl_FragColor = vec4 (result, 1.0);
}